---
title: 文章上传
permalink: /blog/upload
---

# 文章上传

<div id="upload-app">
  <div class="upload-container">
    <h2>上传新文章</h2>
    
    <form @submit.prevent="uploadArticle" class="upload-form">
      <!-- 文章标题 -->
      <div class="form-group">
        <label for="title">文章标题：</label>
        <input 
          type="text" 
          id="title" 
          v-model="article.title" 
          placeholder="请输入文章标题"
          required
        />
      </div>
      
      <!-- 文章分类 -->
      <div class="form-group">
        <label for="category">文章分类：</label>
        <select id="category" v-model="article.category" required>
          <option value="">请选择分类</option>
          <option value="技术分享">技术分享</option>
          <option value="学习笔记">学习笔记</option>
          <option value="项目实战">项目实战</option>
          <option value="生活随笔">生活随笔</option>
          <option value="其他">其他</option>
        </select>
      </div>
      
      <!-- 文章标签 -->
      <div class="form-group">
        <label for="tags">文章标签：</label>
        <input 
          type="text" 
          id="tags" 
          v-model="article.tags" 
          placeholder="请输入标签，多个标签用逗号分隔"
        />
      </div>
      
      <!-- 文章描述 -->
      <div class="form-group">
        <label for="description">文章描述：</label>
        <textarea 
          id="description" 
          v-model="article.description" 
          placeholder="请输入文章简介"
          rows="3"
        ></textarea>
      </div>
      
      <!-- 文件上传 -->
      <div class="form-group">
        <label for="file">选择Markdown文件：</label>
        <input 
          type="file" 
          id="file" 
          @change="handleFileSelect" 
          accept=".md,.markdown"
          required
        />
        <div v-if="selectedFile" class="file-info">
          已选择文件: {{ selectedFile.name || '未知文件' }}
        </div>
      </div>
      
      <!-- 文章预览 -->
      <div v-if="article.content" class="form-group">
        <label>文章预览：</label>
        <div class="preview-container">
          <div v-html="renderedContent" class="markdown-preview"></div>
        </div>
      </div>
      
      <!-- 提交按钮 -->
      <div class="form-group">
        <button type="submit" :disabled="uploading" class="upload-btn">
          {{ uploading ? '上传中...' : '上传文章' }}
        </button>
      </div>
    </form>
    
    <!-- 上传状态提示 -->
    <div v-if="message" :class="['message', messageType]">
      {{ message }}
    </div>
  </div>
</div>

<script>
export default {
  data() {
    return {
      article: {
        title: '',
        category: '',
        tags: '',
        description: '',
        content: ''
      },
      selectedFile: null,
      uploading: false,
      message: '',
      messageType: 'info'
    }
  },
  computed: {
    renderedContent() {
      // 简单的markdown渲染预览
      return this.article.content
        .replace(/^# (.*$)/gim, '<h1>$1</h1>')
        .replace(/^## (.*$)/gim, '<h2>$1</h2>')
        .replace(/^### (.*$)/gim, '<h3>$1</h3>')
        .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
        .replace(/\*(.*?)\*/g, '<em>$1</em>')
        .replace(/\n/g, '<br>');
    }
  },
  methods: {
    handleFileSelect(event) {
      const file = event.target.files && event.target.files[0];
      if (file) {
        this.selectedFile = file;
        this.readFileContent(file);
      }
    },
    
    readFileContent(file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        this.article.content = e.target.result;
        // 如果标题为空，尝试从文件内容中提取
        if (!this.article.title) {
          const firstLine = this.article.content.split('\n')[0];
          if (firstLine.startsWith('# ')) {
            this.article.title = firstLine.substring(2).trim();
          }
        }
      };
      reader.readAsText(file);
    },
    
    async uploadArticle() {
      if (!this.selectedFile || !this.article.title) {
        this.showMessage('请填写完整信息并选择文件', 'error');
        return;
      }
      
      this.uploading = true;
      
      try {
        // 生成文件名
        const fileName = this.generateFileName();
        
        // 创建文章数据
        const articleData = {
          ...this.article,
          fileName,
          uploadTime: new Date().toISOString(),
          tags: this.article.tags.split(',').map(tag => tag.trim()).filter(tag => tag)
        };
        
        // 保存到localStorage（实际项目中应该保存到服务器）
        if (typeof localStorage !== 'undefined') {
          this.saveArticle(articleData);
        }
        
        this.showMessage('文章上传成功！', 'success');
        this.resetForm();
        
      } catch (error) {
        this.showMessage('上传失败：' + error.message, 'error');
      } finally {
        this.uploading = false;
      }
    },
    
    generateFileName() {
      const date = new Date();
      const dateStr = date.toISOString().split('T')[0];
      const titleSlug = this.article.title
        .toLowerCase()
        .replace(/[^a-z0-9\u4e00-\u9fa5]/g, '-')
        .replace(/-+/g, '-')
        .replace(/^-|-$/g, '');
      return `${dateStr}-${titleSlug}.md`;
    },
    
    saveArticle(articleData) {
      if (typeof localStorage === 'undefined') return;
      
      // 获取现有文章列表
      const articles = JSON.parse(localStorage.getItem('blog-articles') || '[]');
      
      // 添加新文章
      articles.unshift(articleData);
      
      // 保存到localStorage
      localStorage.setItem('blog-articles', JSON.stringify(articles));
    },
    
    showMessage(text, type) {
      this.message = text;
      this.messageType = type;
      setTimeout(() => {
        this.message = '';
      }, 3000);
    },
    
    resetForm() {
      this.article = {
        title: '',
        category: '',
        tags: '',
        description: '',
        content: ''
      };
      this.selectedFile = null;
      if (typeof document !== 'undefined') {
        const fileInput = document.getElementById('file');
        if (fileInput) fileInput.value = '';
      }
    }
  }
}
</script>

<style scoped>
.upload-container {
  max-width: 800px;
  margin: 0 auto;
  padding: 20px;
  background: #fff;
  border-radius: 8px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

.upload-form {
  margin-top: 20px;
}

.form-group {
  margin-bottom: 20px;
}

.form-group label {
  display: block;
  margin-bottom: 5px;
  font-weight: bold;
  color: #333;
}

.form-group input,
.form-group select,
.form-group textarea {
  width: 100%;
  padding: 10px;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 14px;
  box-sizing: border-box;
}

.form-group input:focus,
.form-group select:focus,
.form-group textarea:focus {
  outline: none;
  border-color: #007bff;
  box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);
}

.file-info {
  margin-top: 5px;
  padding: 5px;
  background: #f8f9fa;
  border-radius: 4px;
  font-size: 12px;
  color: #666;
}

.preview-container {
  max-height: 300px;
  overflow-y: auto;
  border: 1px solid #ddd;
  border-radius: 4px;
  padding: 15px;
  background: #f8f9fa;
}

.markdown-preview {
  line-height: 1.6;
}

.upload-btn {
  background: #007bff;
  color: white;
  border: none;
  padding: 12px 30px;
  border-radius: 4px;
  cursor: pointer;
  font-size: 16px;
  transition: background-color 0.3s;
}

.upload-btn:hover:not(:disabled) {
  background: #0056b3;
}

.upload-btn:disabled {
  background: #6c757d;
  cursor: not-allowed;
}

.message {
  margin-top: 15px;
  padding: 10px;
  border-radius: 4px;
  text-align: center;
}

.message.success {
  background: #d4edda;
  color: #155724;
  border: 1px solid #c3e6cb;
}

.message.error {
  background: #f8d7da;
  color: #721c24;
  border: 1px solid #f5c6cb;
}

.message.info {
  background: #d1ecf1;
  color: #0c5460;
  border: 1px solid #bee5eb;
}
</style>