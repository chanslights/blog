---
title: 编辑文章
permalink: /blog/edit
---

# 编辑文章

<div id="edit-app">
  <div class="edit-container">
    <div v-if="!articleToEdit" class="no-article">
      <h2>未找到要编辑的文章</h2>
      <p>请从文章列表中选择要编辑的文章</p>
      <a href="/blog/list" class="back-btn">返回文章列表</a>
    </div>
    
    <div v-else>
      <h2>编辑文章</h2>
      
      <form @submit.prevent="updateArticle" class="edit-form">
        <!-- 文章标题 -->
        <div class="form-group">
          <label for="title">文章标题：</label>
          <input 
            type="text" 
            id="title" 
            v-model="article.title" 
            placeholder="请输入文章标题"
            required
          />
        </div>
        
        <!-- 文章分类 -->
        <div class="form-group">
          <label for="category">文章分类：</label>
          <select id="category" v-model="article.category" required>
            <option value="">请选择分类</option>
            <option value="技术分享">技术分享</option>
            <option value="学习笔记">学习笔记</option>
            <option value="项目实战">项目实战</option>
            <option value="生活随笔">生活随笔</option>
            <option value="其他">其他</option>
          </select>
        </div>
        
        <!-- 文章标签 -->
        <div class="form-group">
          <label for="tags">文章标签：</label>
          <input 
            type="text" 
            id="tags" 
            v-model="tagsString" 
            placeholder="请输入标签，多个标签用逗号分隔"
          />
        </div>
        
        <!-- 文章描述 -->
        <div class="form-group">
          <label for="description">文章描述：</label>
          <textarea 
            id="description" 
            v-model="article.description" 
            placeholder="请输入文章简介"
            rows="3"
          ></textarea>
        </div>
        
        <!-- 文章内容 -->
        <div class="form-group">
          <label for="content">文章内容：</label>
          <div class="editor-container">
            <div class="editor-tabs">
              <button 
                type="button" 
                :class="['tab-btn', { active: activeTab === 'edit' }]"
                @click="activeTab = 'edit'"
              >
                编辑
              </button>
              <button 
                type="button" 
                :class="['tab-btn', { active: activeTab === 'preview' }]"
                @click="activeTab = 'preview'"
              >
                预览
              </button>
            </div>
            
            <div v-show="activeTab === 'edit'" class="editor-panel">
              <textarea 
                id="content" 
                v-model="article.content" 
                placeholder="请输入文章内容（支持Markdown格式）"
                rows="20"
                class="content-editor"
              ></textarea>
            </div>
            
            <div v-show="activeTab === 'preview'" class="preview-panel">
              <div v-html="renderedContent" class="markdown-preview"></div>
            </div>
          </div>
        </div>
        
        <!-- 操作按钮 -->
        <div class="form-actions">
          <button type="submit" :disabled="updating" class="update-btn">
            {{ updating ? '更新中...' : '更新文章' }}
          </button>
          <button type="button" @click="cancelEdit" class="cancel-btn">
            取消
          </button>
          <button type="button" @click="deleteArticle" class="delete-btn">
            删除文章
          </button>
        </div>
      </form>
      
      <!-- 状态提示 -->
      <div v-if="message" :class="['message', messageType]">
        {{ message }}
      </div>
    </div>
  </div>
</div>

<script>
export default {
  data() {
    return {
      article: {
        title: '',
        category: '',
        tags: [],
        description: '',
        content: '',
        fileName: ''
      },
      articleToEdit: null,
      tagsString: '',
      activeTab: 'edit',
      updating: false,
      message: '',
      messageType: 'info'
    }
  },
  
  computed: {
    renderedContent() {
      return this.renderMarkdown(this.article.content);
    }
  },
  
  mounted() {
    if (typeof window !== 'undefined' && typeof localStorage !== 'undefined') {
      this.loadArticleToEdit();
    }
  },
  
  methods: {
    loadArticleToEdit() {
      if (typeof window === 'undefined' || typeof localStorage === 'undefined') return;
      
      // 从URL参数获取要编辑的文章文件名
      const urlParams = new URLSearchParams(window.location.search);
      const fileName = urlParams.get('file');
      
      if (!fileName) {
        return;
      }
      
      // 从localStorage获取文章数据
      const articles = JSON.parse(localStorage.getItem('blog-articles') || '[]');
      const article = articles.find(a => a.fileName === fileName);
      
      if (article) {
        this.articleToEdit = article;
        this.article = { ...article };
        this.tagsString = Array.isArray(article.tags) ? article.tags.join(', ') : '';
      }
    },
    
    async updateArticle() {
      if (!this.article.title || !this.article.content) {
        this.showMessage('请填写完整信息', 'error');
        return;
      }
      
      this.updating = true;
      
      try {
        // 处理标签
        this.article.tags = this.tagsString
          .split(',')
          .map(tag => tag.trim())
          .filter(tag => tag);
        
        // 更新修改时间
        this.article.lastModified = new Date().toISOString();
        
        if (typeof localStorage === 'undefined') {
          throw new Error('浏览器不支持localStorage');
        }
        
        // 获取现有文章列表
        const articles = JSON.parse(localStorage.getItem('blog-articles') || '[]');
        
        // 找到并更新文章
        const index = articles.findIndex(a => a.fileName === this.article.fileName);
        if (index !== -1) {
          articles[index] = { ...this.article };
          localStorage.setItem('blog-articles', JSON.stringify(articles));
          
          this.showMessage('文章更新成功！', 'success');
          
          // 3秒后跳转到文章列表
          if (typeof window !== 'undefined') {
            setTimeout(() => {
              window.location.href = '/blog/list';
            }, 2000);
          }
        } else {
          throw new Error('未找到要更新的文章');
        }
        
      } catch (error) {
        this.showMessage('更新失败：' + error.message, 'error');
      } finally {
        this.updating = false;
      }
    },
    
    cancelEdit() {
      if (typeof window === 'undefined') return;
      
      if (confirm('确定要取消编辑吗？未保存的更改将丢失。')) {
        window.location.href = '/blog/list';
      }
    },
    
    deleteArticle() {
      if (typeof window === 'undefined' || typeof localStorage === 'undefined') return;
      
      if (confirm(`确定要删除文章「${this.article.title}」吗？此操作不可恢复。`)) {
        const articles = JSON.parse(localStorage.getItem('blog-articles') || '[]');
        const updatedArticles = articles.filter(a => a.fileName !== this.article.fileName);
        localStorage.setItem('blog-articles', JSON.stringify(updatedArticles));
        
        this.showMessage('文章已删除', 'success');
        
        setTimeout(() => {
          window.location.href = '/blog/list';
        }, 1500);
      }
    },
    
    renderMarkdown(content) {
      // 简单的markdown渲染
      return content
        .replace(/^# (.*$)/gim, '<h1>$1</h1>')
        .replace(/^## (.*$)/gim, '<h2>$1</h2>')
        .replace(/^### (.*$)/gim, '<h3>$1</h3>')
        .replace(/^#### (.*$)/gim, '<h4>$1</h4>')
        .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
        .replace(/\*(.*?)\*/g, '<em>$1</em>')
        .replace(/`(.*?)`/g, '<code>$1</code>')
        .replace(/^\* (.*$)/gim, '<li>$1</li>')
        .replace(/(<li>.*<\/li>)/s, '<ul>$1</ul>')
        .replace(/\n\n/g, '</p><p>')
        .replace(/\n/g, '<br>')
        .replace(/^(.*)$/gim, '<p>$1</p>')
        .replace(/<p><h/g, '<h')
        .replace(/<\/h([1-6])><\/p>/g, '</h$1>')
        .replace(/<p><ul>/g, '<ul>')
        .replace(/<\/ul><\/p>/g, '</ul>');
    },
    
    showMessage(text, type) {
      this.message = text;
      this.messageType = type;
      setTimeout(() => {
        this.message = '';
      }, 3000);
    }
  }
}
</script>

<style scoped>
.edit-container {
  max-width: 1000px;
  margin: 0 auto;
  padding: 20px;
}

.no-article {
  text-align: center;
  padding: 60px 20px;
  color: #666;
}

.back-btn {
  display: inline-block;
  margin-top: 20px;
  padding: 10px 20px;
  background: #007bff;
  color: white;
  text-decoration: none;
  border-radius: 4px;
  transition: background-color 0.3s;
}

.back-btn:hover {
  background: #0056b3;
}

.edit-form {
  margin-top: 20px;
}

.form-group {
  margin-bottom: 20px;
}

.form-group label {
  display: block;
  margin-bottom: 5px;
  font-weight: bold;
  color: #333;
}

.form-group input,
.form-group select,
.form-group textarea {
  width: 100%;
  padding: 10px;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 14px;
  box-sizing: border-box;
}

.form-group input:focus,
.form-group select:focus,
.form-group textarea:focus {
  outline: none;
  border-color: #007bff;
  box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);
}

.editor-container {
  border: 1px solid #ddd;
  border-radius: 4px;
  overflow: hidden;
}

.editor-tabs {
  display: flex;
  background: #f8f9fa;
  border-bottom: 1px solid #ddd;
}

.tab-btn {
  padding: 10px 20px;
  border: none;
  background: transparent;
  cursor: pointer;
  font-size: 14px;
  color: #666;
  transition: all 0.3s;
}

.tab-btn.active {
  background: white;
  color: #007bff;
  border-bottom: 2px solid #007bff;
}

.tab-btn:hover {
  background: #e9ecef;
}

.editor-panel,
.preview-panel {
  min-height: 400px;
}

.content-editor {
  width: 100%;
  min-height: 400px;
  border: none;
  padding: 15px;
  font-family: 'Courier New', monospace;
  font-size: 14px;
  line-height: 1.5;
  resize: vertical;
  box-sizing: border-box;
}

.content-editor:focus {
  outline: none;
}

.preview-panel {
  padding: 15px;
  background: white;
  overflow-y: auto;
}

.markdown-preview {
  line-height: 1.6;
  color: #333;
}

.markdown-preview h1,
.markdown-preview h2,
.markdown-preview h3,
.markdown-preview h4 {
  margin-top: 20px;
  margin-bottom: 10px;
  color: #333;
}

.markdown-preview p {
  margin-bottom: 15px;
}

.markdown-preview code {
  background: #f8f9fa;
  padding: 2px 4px;
  border-radius: 3px;
  font-family: 'Courier New', monospace;
}

.markdown-preview ul {
  margin: 15px 0;
  padding-left: 20px;
}

.markdown-preview li {
  margin-bottom: 5px;
}

.form-actions {
  display: flex;
  gap: 15px;
  margin-top: 30px;
  padding-top: 20px;
  border-top: 1px solid #eee;
}

.update-btn,
.cancel-btn,
.delete-btn {
  padding: 12px 24px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 16px;
  transition: background-color 0.3s;
}

.update-btn {
  background: #28a745;
  color: white;
}

.update-btn:hover:not(:disabled) {
  background: #218838;
}

.update-btn:disabled {
  background: #6c757d;
  cursor: not-allowed;
}

.cancel-btn {
  background: #6c757d;
  color: white;
}

.cancel-btn:hover {
  background: #5a6268;
}

.delete-btn {
  background: #dc3545;
  color: white;
  margin-left: auto;
}

.delete-btn:hover {
  background: #c82333;
}

.message {
  margin-top: 15px;
  padding: 10px;
  border-radius: 4px;
  text-align: center;
}

.message.success {
  background: #d4edda;
  color: #155724;
  border: 1px solid #c3e6cb;
}

.message.error {
  background: #f8d7da;
  color: #721c24;
  border: 1px solid #f5c6cb;
}

.message.info {
  background: #d1ecf1;
  color: #0c5460;
  border: 1px solid #bee5eb;
}

@media (max-width: 768px) {
  .form-actions {
    flex-direction: column;
  }
  
  .delete-btn {
    margin-left: 0;
  }
  
  .editor-tabs {
    flex-wrap: wrap;
  }
  
  .content-editor {
    min-height: 300px;
  }
}
</style>